/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.2/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'

    id "io.qameta.allure" version "2.8.1"
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.0-jre'

    // Generic wait
    implementation('org.awaitility:awaitility:4.1.0')

    //appium
    implementation 'io.appium:java-client:8.0.0'

    //selenium
    implementation 'org.seleniumhq.selenium:selenium-java:4.1.1'

    //apache
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    //lombok
    implementation('org.projectlombok:lombok:1.18.20')
    annotationProcessor('org.projectlombok:lombok:1.18.20')
    testImplementation('org.projectlombok:lombok:1.18.20')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.20')

    //faker
    implementation 'com.github.javafaker:javafaker:1.0.2'

    //gson
    implementation 'com.google.code.gson:gson:2.8.9'

    //AssertJ
    implementation 'org.assertj:assertj-core:3.22.0'

    //Allure
    implementation('io.qameta.allure:allure-gradle:2.8.1')
    implementation('io.qameta.allure:allure-java-commons:2.14.0')
    implementation('io.qameta.allure:allure-testng:2.14.0')
    implementation 'org.aspectj:aspectjweaver:1.9.8.RC3'

    //Ekam
    implementation('com.testvagrant.ekam:ekam-commons:1.0.2')
    implementation('com.testvagrant.ekam:ekam-device-manager:1.0.2-beta')

// Use TestNG framework, also requires calling test.useTestNG() below
    testImplementation 'org.testng:testng:6.14.3'
}

application {
    // Define the main class for the application
    mainClassName = 'com.ultralesson.training.mobile.App'
}

task runMobileTests(type: Test) {
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "classes"
        threadCount Integer.parseInt(System.getProperty("sessions", "1"))
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/mobile-reports")
    }
}

allure {
    version = '2.13.2'
    autoconfigure = true
    aspectjweaver = true
    allureJavaVersion = '2.13.2'
    reportDir = new File(project.projectDir as File, '/allure-report/ui')
    resultsDir = new File(project.projectDir as File, '/allure-report/results')
    clean = true
}

task createReportDir() {
    doLast {
        def file = new File(project.projectDir as File, '/allure-report/ui')
        if (!file.exists()) {
            file.mkdirs();
        }
    }
}

task saveHistory(type: Copy) {
    from new File(project.projectDir as File, '/allure-report/ui/history')
    into new File(project.projectDir as File, '/allure-report/results/history')
}


clean {
    if (!System.getenv('CI')) {
        delete "$projectDir/allure-report"
        delete "$projectDir/allure-results"
    }
}

// Execution Rules
tasks.runMobileTests.dependsOn 'clean', 'build', 'createReportDir'
tasks.build.mustRunAfter 'clean'
tasks.runMobileTests.finalizedBy('allureReport')

